-- FUNCTION: core.get_share_closing_balance(integer, date, date, character varying, character varying)

-- DROP FUNCTION IF EXISTS core.get_share_closing_balance(integer, date, date, character varying, character varying);

CREATE OR REPLACE FUNCTION core.get_share_closing_balance(
	office_id_ integer,
	from_ date,
	to_ date,
	product_ character varying,
	unit_ character varying)
    RETURNS TABLE(sn bigint, open_date date, customer_id bigint, share_account_id bigint, account_number character varying, customer_name text, address text, contact text, gender text, dob character varying, age integer, unit character varying, product character varying, opening_balance money, debit money, credit money, balance money) 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$
BEGIN
	CREATE TEMP TABLE _t(
	open_date 	date,
	customer_id	bigint,
	share_account_id	bigint,
	account_number	character varying(50),
	customer_name	text,
	address		text,
	contact		text,
	gender		text,
	dob         character varying(20),
	age         int,
	unit		character varying(50),
	product		character varying(150),
	opening_balance	money,
	debit		money,
	credit		money,
	balance		money

	) ON COMMIT DROP;

	IF office_id_ > 0 THEN
	INSERT INTO _t(open_date, customer_id, share_account_id, account_number, customer_name, address, contact, gender, unit, product, dob)
	SELECT 
		ac.creation_date,
		ac.customer_id,
		ac.share_account_id,
		ac.account_number,
		c.customer_name,
		'',
		--c.permanent_address,
		c.contact_number,
		c.gender_name,
		c.unit_name, 
		p.share_product_name,
		CASE WHEN c.date_of_birth ='' THEN NULL ELSE core.date_bs_from_ad(left(c.date_of_birth, 19)::date) END
	FROM core.share_accounts ac
 	INNER JOIN core.customers_view c
		ON ac.customer_id = c.customer_id
	INNER JOIN core.share_products p
		ON ac.share_product_id = p.share_product_id
	WHERE ac.office_id = office_id_;
	ELSE
		INSERT INTO _t(open_date,customer_id, share_account_id, account_number, customer_name, address, contact, gender,unit, product, dob)
	SELECT 
		ac.creation_date,
		ac.customer_id,
		ac.share_account_id,
		ac.account_number,
		c.customer_name,
		'',
		--c.permanent_address,
		c.contact_number,
		c.gender_name,
		c.unit_name, 
		p.share_product_name,
		CASE WHEN c.date_of_birth ='' THEN NULL ELSE core.date_bs_from_ad(left(c.date_of_birth, 19)::date) END
	FROM core.share_accounts ac
 	INNER JOIN core.customers_view c
		ON ac.customer_id = c.customer_id
	INNER JOIN core.share_products p
		ON ac.share_product_id = p.share_product_id;
	END IF;

	IF unit_ <> '' THEN
		DELETE FROM _t WHERE _t.unit <> unit_;
	END IF;
	
	IF product_ <> '' THEN
		DELETE FROM _t WHERE _t.product <> product_;
	END IF;

	UPDATE _t SET opening_balance = op.bal
	FROM (
		SELECT v.share_account_id ac, SUM(COALESCE(v.credit,'0')) - SUM(COALESCE(v.debit,'0')) bal
		FROM core.share_transaction_view v
		WHERE tran_date < from_
		GROUP BY v.share_account_id
	) op
	WHERE _t.share_account_id = op.ac;

	UPDATE _t SET debit = tt.dr, credit=tt.cr
	FROM (
		SELECT v.share_account_id ac, SUM(v.debit) dr, SUM(v.credit) cr
		FROM core.share_transaction_view v
		WHERE tran_date BETWEEN from_ AND to_
		GROUP BY v.share_account_id
	) tt 
	WHERE _t.share_account_id = tt.ac;

	UPDATE _t SET balance = COALESCE(_t.opening_balance, '0') + COALESCE(_t.credit, '0') - COALESCE(_t.debit, '0');
	INSERT INTO _t(customer_name, opening_balance, debit, credit, balance) 
	SELECT '		Total', SUM(COALESCE(_t.opening_balance, '0')), SUM(COALESCE(_t.debit, '0')), SUM(COALESCE(_t.credit, '0')), SUM(COALESCE(_t.balance, '0')) FROM _t;
	DELETE FROM _t WHERE _t.balance = '0';

	UPDATE _t SET age = core.get_age(_t.customer_id);
	UPDATE _t SET address = (SELECT customer_address FROM core.get_address(_t.customer_id));

	RETURN QUERY(
	SELECT ROW_NUMBER() OVER (ORDER BY _t.account_number ), _t.open_date, _t.customer_id, _t.share_account_id, _t.account_number, _t.customer_name, _t.address, _t.contact, _t.gender, 
	_t.dob, _t.age, _t.unit, _t.product, _t.opening_balance, _t.debit, _t.credit, _t.balance
	FROM _t ORDER BY _t.account_number);
END

-- select * from core.get_share_closing_balance(0, '2021-10-10', '2021-10-10', '', '')

$BODY$;

ALTER FUNCTION core.get_share_closing_balance(integer, date, date, character varying, character varying)
    OWNER TO postgres;
