CREATE OR REPLACE FUNCTION loan.get_closing_balance_np(
	office_id_ integer,
	from_ date,
	to_ date,
	product_ character varying,
	unit_ character varying)
    RETURNS TABLE(issue_date date, customer_id bigint, loan_id bigint, account_number character varying, customer_name text, address text, contact text, gender text, dob character varying, age integer, unit character varying, product character varying, collector character varying, opening_balance money, debit money, credit money, balance money) 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$

BEGIN
	CREATE TEMP TABLE _t(
	issue_date	date,
	customer_id	bigint,
	loan_id		bigint,
	account_number	character varying(50),
	customer_name	text,
	address		text,
	contact		text,
	gender		text,
	dob         character varying(20),
	age         int,
	unit		character varying(50),
	product		character varying(150),
	collector	character varying(150),
	opening_balance	money,
	debit		money,
	credit		money,
	balance		money

	) ON COMMIT DROP;

	IF office_id_ > 0 THEN
	INSERT INTO _t(issue_date, customer_id, loan_id, account_number, customer_name, address, contact, gender, unit, product, collector, dob)
	SELECT 
		ac.issue_date,
		ac.customer_id,
		ac.loan_id,
		ac.loan_account_number,
		c.nepali_name,
		c.nepali_address,
		c.contact_number,
		c.gender_name,
		c.unit_name, 
		p.loan_product_name,
		cl.collector_name,
        CASE WHEN date_of_birth ='' THEN NULL ELSE core.date_bs_from_ad(left(date_of_birth, 19)::date) END
	FROM loan.loan_grant ac
	INNER JOIN core.customers_view c
		ON ac.customer_id = c.customer_id
	INNER JOIN loan.loan_products p
		ON ac.loan_product_id = p.loan_product_id
	INNER JOIN office.collectors cl
		ON ac.collector_id=cl.collector_id
	WHERE ac.office_id = office_id_
	AND   ac.issue_date<=from_ ;
	--AND is_dead = false;
	ELSE
	INSERT INTO _t(issue_date, customer_id, loan_id, account_number, customer_name, address, contact, gender, unit, product, collector, dob)
	SELECT 
		ac.issue_date,
		ac.customer_id,
		ac.loan_id,
		ac.loan_account_number,
		c.customer_name,
		c.permanent_address,
		c.contact_number,
		c.gender_name,
		c.unit_name, 
		p.loan_product_name,
		cl.collector_name,
        ''--CASE WHEN c.date_of_birth ='' THEN NULL ELSE core.date_bs_from_ad(left(c.date_of_birth, 19)::date) END
	FROM loan.loan_grant ac
	INNER JOIN core.customers_view c
		ON ac.customer_id = c.customer_id
	INNER JOIN loan.loan_products p
		ON ac.loan_product_id = p.loan_product_id
	INNER JOIN office.collectors cl
		ON ac.collector_id=cl.collector_id
	WHERE is_dead = false
	AND   ac.issue_date<=from_;
	END IF;

	IF unit_ <> '' THEN
		DELETE FROM _t WHERE _t.unit <> unit_;
	END IF;
	
	IF product_ <> '' THEN
		DELETE FROM _t WHERE _t.product <> product_;
	END IF;

	UPDATE _t SET opening_balance = op.bal
	FROM (
	SELECT t.loan_id ac, SUM(COALESCE(t.debit, '0')) - SUM(COALESCE(t.credit,'0')) bal
	FROM loan.principal_transaction_view t
	WHERE t.tran_date < from_
	GROUP BY t.loan_id
	) op WHERE _t.loan_id = op.ac;

IF 
	from_ = to_ THEN
	UPDATE _t SET debit = bal.dr, credit = bal.cr
	FROM (
	SELECT t.loan_id ac, SUM(COALESCE(t.debit, '0')) dr, SUM(COALESCE(t.credit,'0')) cr
	FROM loan.principal_transaction_view t
	WHERE t.tran_date= from_
	GROUP BY t.loan_id
	) bal WHERE _t.loan_id = bal.ac;

	ELSE
	
	UPDATE _t SET debit = bal.dr, credit = bal.cr
	FROM (
	SELECT t.loan_id ac, SUM(COALESCE(t.debit, '0')) dr, SUM(COALESCE(t.credit,'0')) cr
	FROM loan.principal_transaction_view t
	WHERE t.tran_date BETWEEN from_ AND to_
	GROUP BY t.loan_id
	) bal WHERE _t.loan_id = bal.ac;
	END IF;

	UPDATE _t SET balance = COALESCE(_t.opening_balance,'0')  + COALESCE(_t.debit,'0') - COALESCE(_t.credit,'0');
	INSERT INTO _t(customer_name, opening_balance, debit, credit, balance) 
	SELECT '		Total', SUM(COALESCE(_t.opening_balance, '0')), SUM(COALESCE(_t.debit, '0')), SUM(COALESCE(_t.credit, '0')), SUM(COALESCE(_t.balance, '0')) FROM _t;

	DELETE FROM _t WHERE _t.balance = '0' AND _t.opening_balance='0';

    --UPDATE _t SET age = core.get_age(_t.customer_id);
    
	RETURN QUERY(
	SELECT _t.issue_date, _t.customer_id, _t.loan_id, _t.account_number, _t.customer_name, _t.address, _t.contact, _t.gender, 
	_t.dob, _t.age, _t.unit, _t.product, _t.collector,_t.opening_balance, _t.debit, _t.credit, _t.balance
	FROM _t ORDER BY _t.loan_id);
END
$BODY$;