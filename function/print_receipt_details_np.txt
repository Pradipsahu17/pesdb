CREATE OR REPLACE FUNCTION loan.print_receipt_details_np(
	receipt_id_ bigint)
    RETURNS TABLE(receipt_id bigint, customer_id bigint, account_number text, customer_name text, address text, interest_rate numeric, issue_date date, total_issue money, maturity_date date, last_principal_due text, last_interest_due money, current_days integer, due_principal money, due_interest money, total_due money) 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$
	DECLARE _tran_date	date;
	DECLARE _int_date	date;
BEGIN
	SELECT r.tran_date, r.interest_date INTO _tran_date, _int_date FROM loan.loan_receipts r WHERE r.receipt_id = $1;
RETURN QUERY(
	SELECT r.receipt_id, a.customer_id, a.loan_account_number || ' ('|| p.loan_product_name ||')' loan_account_number, c.nepali_name, c.nepali_address, loan.get_interest_rate(a.loan_id), 
        a.issue_date::date, t.issue, loan.get_maturity_date(a.loan_id), loan.get_remaining_principal(a.loan_id, _tran_date - 1)::numeric::text ||' ('|| core.date_bs_from_ad(loan.get_last_payment_date(r.loan_id, r.interest_date - 1))||')',
        loan.get_remaining_interest(a.loan_id, _tran_date - 1), r.days,
		loan.get_remaining_principal_unverified(a.loan_id, _tran_date), loan.get_current_interest_unverified(a.loan_id, _int_date), 
		loan.get_remaining_principal_unverified(a.loan_id, _tran_date) + loan.get_current_interest_unverified(a.loan_id, _int_date)
	FROM loan.loan_receipts r
	INNER JOIN loan.loan_grant a ON r.loan_id = a.loan_id
	INNER JOIN loan.loan_products p ON a.loan_product_id = p.loan_product_id
	LEFT JOIN core.customers_view c ON a.customer_id = c.customer_id
	INNER JOIN (SELECT v.loan_id, SUM(COALESCE(v.debit, '0')) issue, SUM(COALESCE(v.credit, '0')) received FROM loan.principal_transaction_view v
		WHERE v.tran_date < _tran_date GROUP BY v.loan_id) t 
		ON t.loan_id = r.loan_id
	WHERE r.receipt_id = $1
	);
END
$BODY$;